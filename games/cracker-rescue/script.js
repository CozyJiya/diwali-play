const player = document.getElementById("player");
const gameArea = document.getElementById("gameArea");
const messageElement = document.getElementById("message");
const nextBtn = document.getElementById("nextBtn");
const timeLeftElement = document.getElementById("timeLeft");
const scoreElement = document.getElementById("score");
// New element reference
const explosionElement = document.getElementById("explosion"); 

const GAME_DURATION = 30; // seconds
const GAME_WIDTH = 400;
const GAME_HEIGHT = 400; // Added for clarity with spark removal
const PLAYER_SIZE = 50;
const SPARK_SIZE = 8;
const PLAYER_MOVE_STEP = 20;

let playerX = (GAME_WIDTH / 2) - (PLAYER_SIZE / 2);
let sparksAvoided = 0;
let timeLeft = GAME_DURATION;
let sparks = [];
let gameActive = true;
let animationFrameId;
let timerIntervalId;
let sparkIntervalId;

// Initialize player position
player.style.left = playerX + "px";

// --- Player Movement (Keyboard) ---
document.addEventListener("keydown", (e) => {
Â  Â  if (!gameActive) return;

Â  Â  if (e.key === "ArrowLeft") {
Â  Â  Â  Â  playerX = Math.max(0, playerX - PLAYER_MOVE_STEP);
Â  Â  }
Â  Â  if (e.key === "ArrowRight") {
Â  Â  Â  Â  playerX = Math.min(GAME_WIDTH - PLAYER_SIZE, playerX + PLAYER_MOVE_STEP);
Â  Â  }
Â  Â  player.style.left = playerX + "px";
});

// --- Spark Generation ---
function createSpark() {
Â  Â  if (!gameActive) return;
Â  Â  const spark = document.createElement("div");
Â  Â  spark.classList.add("spark");
Â  Â  // Random position within the game area bounds
Â  Â  const sparkX = Math.floor(Math.random() * (GAME_WIDTH - SPARK_SIZE));
Â  Â  spark.style.left = sparkX + "px";
Â  Â  gameArea.appendChild(spark);
Â  Â  
Â  Â  sparks.push({
Â  Â  Â  Â  element: spark,
Â  Â  Â  Â  x: sparkX,
Â  Â  Â  Â  y: 0,
Â  Â  Â  Â  speed: 3 + Math.random() * 2 // Variable speed
Â  Â  });
}

sparkIntervalId = setInterval(createSpark, 700); // Sparks spawn every 0.7s

// --- Game Loop (Spark Movement and Collision) ---
function gameLoop() {
Â  Â  if (!gameActive) return;

Â  Â  for (let i = sparks.length - 1; i >= 0; i--) {
Â  Â  Â  Â  const spark = sparks[i];
Â  Â  Â  Â  spark.y += spark.speed;
Â  Â  Â  Â  spark.element.style.top = spark.y + "px";

Â  Â  Â  Â  // Collision Detection: Check if spark hits the player
Â  Â  Â  Â  if (spark.y >= (GAME_HEIGHT - PLAYER_SIZE) && 
Â  Â  Â  Â  Â  Â  spark.x < playerX + PLAYER_SIZE && 
Â  Â  Â  Â  Â  Â  spark.x + SPARK_SIZE > playerX) {
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  // Collision! Game Over
Â  Â  Â  Â  Â  Â  gameActive = false;
Â  Â  Â  Â  Â  Â  endGame(false); 
Â  Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  }

Â  Â  Â  Â  // If spark passes the bottom without collision (Avoided)
Â  Â  Â  Â  if (spark.y > GAME_HEIGHT) {
Â  Â  Â  Â  Â  Â  spark.element.remove();
Â  Â  Â  Â  Â  Â  sparks.splice(i, 1);
Â  Â  Â  Â  Â  Â  sparksAvoided++;
Â  Â  Â  Â  Â  Â  scoreElement.textContent = sparksAvoided;
Â  Â  Â  Â  }
Â  Â  }

Â  Â  animationFrameId = requestAnimationFrame(gameLoop);
}

// --- Timer ---
timerIntervalId = setInterval(() => {
Â  Â  if (!gameActive) return;

Â  Â  timeLeft--;
Â  Â  timeLeftElement.textContent = timeLeft;

Â  Â  if (timeLeft <= 0) {
Â  Â  Â  Â  gameActive = false;
Â  Â  Â  Â  endGame(true);
Â  Â  }
}, 1000);

// --- End Game Function ---
function endGame(survived) {
Â  Â  cancelAnimationFrame(animationFrameId);
Â  Â  clearInterval(timerIntervalId);
Â  Â  clearInterval(sparkIntervalId);

Â  Â  // Remove all remaining sparks
Â  Â  sparks.forEach(s => s.element.remove());
Â  Â  sparks = [];

Â  Â  if (survived) {
Â  Â  Â  Â  // Win Condition
Â  Â  Â  Â  messageElement.style.color = '#2BAE66'; // Green for success
Â  Â  Â  Â  messageElement.innerHTML = `ðŸŒŸ **YOU SAVED THE SPARKLE!** You avoided **${sparksAvoided}** sparks in 30 seconds. I heard there's a serious misfire happening... and I need you to come rescue me from my clothes before I spontaneously combust. Let's make some noise and a few explosions.`;
Â  Â  } else {
Â  Â  Â  Â  // Lose Condition
Â  Â  Â  Â  messageElement.style.color = '#b33939'; // Theme color for failure message
Â  Â  Â  Â  messageElement.innerHTML = `ðŸ’¥ **CRACKER RESCUE FAILED!** A spark hit the gift box. You avoided **${sparksAvoided}** sparks. Try again! ðŸ˜¥`;
Â  Â  Â  Â  
Â  Â  Â  Â  // Explosion Effect
        // Set explosion position to player center (approximated)
        explosionElement.style.left = (playerX + PLAYER_SIZE / 2) + 'px';
        explosionElement.style.top = (GAME_HEIGHT - PLAYER_SIZE / 2) + 'px';
        explosionElement.style.display = 'block';
        
        // Hide player after explosion
        player.style.opacity = '0'; 

        // Hide explosion after animation finishes
        setTimeout(() => {
            explosionElement.style.display = 'none';
        }, 500);
Â  Â  }
Â  Â  
Â  Â  // Show the next button
Â  Â  nextBtn.style.display = 'inline-block';
}

// Start the game loop
gameLoop();